#coding: utf8
import Queue
import collections
class Solution(object):
    def isEscapePossibleTLE(self, blocked, source, target):
        """
        :type blocked: List[List[int]]
        :type source: List[int]
        :type target: List[int]
        :rtype: bool
        """
        blocked_set = set()

        for [fr, to] in blocked:
            blocked_set.add("{},{}".format(fr, to))

        LIM = 1000000
        BFS_BORDER = 210
        REACH = 201

        def bfs(start):
            vis = [[0 for i in xrange(500)] for j in xrange(500)]
            q = Queue.Queue()
            q.put(start)
            def V(x, y):
                return vis[x - start[0]][y - start[1]]
            def SV(x, y, v = 1):
                vis[x - start[0]][y - start[1]] = 1
            def valid(x, y):
                return (-BFS_BORDER <= x - start[0] <= BFS_BORDER) and (-BFS_BORDER <= y - start[1] <= BFS_BORDER) and (0 <= x < LIM) and (0 <= y < LIM)
            def can(x, y):
                return not "{},{}".format(x, y) in blocked_set
            while not q.empty():
                Dx = [0, 0, 1, -1]
                Dy = [1, -1, 0, 0]
                [x, y] = q.get()
                if V(x, y):
                    continue
                SV(x, y)
                if x - start[0] < -REACH or x - start[0] > REACH or y - start[1] < -REACH or y - start[1] > REACH:
                    # 如果能够成功突围
                    # print "REACH {} {} from {}".format(x, y, start)
                    return True
                for (dx, dy) in zip(Dx, Dy):
                    nx = x + dx
                    ny = y + dy
                    # print "nx {} ny {} not V((nx, ny)) {} can((nx, ny)) {}".format(nx, ny, not V((nx, ny)), can((nx, ny)))
                    if valid(nx, ny) and (not V(nx, ny)) and can(nx, ny):
                        # print x, y, V(x, y), nx, ny
                        q.put([nx, ny])
            return False

        can_src = bfs(source)
        # can_src = True
        can_tar = bfs(target)
        # print "can_tar {} can_src {}".format(can_tar, can_src)
        return (can_tar and can_src)

    def isEscapePossible(self, blocked, source, target):
        N=10**6
        bs=set() 
        for b in blocked:
            bs.add(tuple(b))

        def bfs(p):
            q=collections.deque()
            q.append(p)
            seen=set([tuple(p)])
            while q:
                x,y=q.popleft()
                if len(seen)>19900:return 1 # outside
                for nx,ny in ((x-1,y),(x,y-1),(x,y+1),(x+1,y)):
                    if (nx,ny) not in bs and (nx,ny,) not in seen and 0<=nx<N and 0<=ny<N:
                        q.append((nx,ny))
                        seen.add((nx,ny))
            return 0 # inside
        x,y = bfs(source),bfs(target)
        if x ^ y==1:return False
        else:return True

sln = Solution()
print sln.isEscapePossible(blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]) # F
print sln.isEscapePossible(blocked = [], source = [0,0], target = [999999,999999]) # T
print sln.isEscapePossible([[100059,100063],[100060,100064],[100061,100065],[100062,100066],[100063,100067],[100064,100068],[100065,100069],[100066,100070],[100067,100071],[100068,100072],[100069,100073],[100070,100074],[100071,100075],[100072,100076],[100073,100077],[100074,100078],[100075,100079],[100076,100080],[100077,100081],[100078,100082],[100079,100083],[100080,100082],[100081,100081],[100082,100080],[100083,100079],[100084,100078],[100085,100077],[100086,100076],[100087,100075],[100088,100074],[100089,100073],[100090,100072],[100091,100071],[100092,100070],[100093,100069],[100094,100068],[100095,100067],[100096,100066],[100097,100065],[100098,100064],[100099,100063],[100098,100062],[100097,100061],[100096,100060],[100095,100059],[100094,100058],[100093,100057],[100092,100056],[100091,100055],[100090,100054],[100089,100053],[100088,100052],[100087,100051],[100086,100050],[100085,100049],[100084,100048],[100083,100047],[100082,100046],[100081,100045],[100080,100044],[100079,100043],[100078,100044],[100077,100045],[100076,100046],[100075,100047],[100074,100048],[100073,100049],[100072,100050],[100071,100051],[100070,100052],[100069,100053],[100068,100054],[100067,100055],[100066,100056],[100065,100057],[100064,100058],[100063,100059],[100062,100060],[100061,100061],[100060,100062]],[100079,100063],[999948,999967]) # F
print sln.isEscapePossible
# class Solution(object):
#     def maximalRectangle(self, matrix):
#         """
#         :type matrix: List[List[str]]
#         :rtype: int
#         """
#         if matrix == [[]]:
#             return 0
#         m, n = len(matrix), len(matrix[0])
#         res = 0

#         dp = [[(0,0) for i in xrange(n)] for j in xrange(m)]
#         dp[0][0] = (1, 1) if matrix[0][0] == 1 else (0, 0)
#         res = dp[0][0][0]
#         for i in xrange(1, m):
#             if matrix[i][0] == 1:
#                 dp[i][0] = (dp[i-1][0][0]+1, 1)
#                 res = max(dp[i][0][0], res)
#             else:
#                 dp[i][0] = (0,0)

#         for i in xrange(1, n):
#             if matrix[0][i] == 1:
#                 dp[0][i] = (1, dp[0][j-1][1]+1)
#                 res = max(dp[0][i][1], res)
#             else:
#                 dp[0][i] = (0,0)


#         for i in xrange(1, m):
#             for j in xrange(1, n):
#                 if matrix[i][j] == 1:
#                     rx, ry = dp[i-1][j][1], dp[i][j-1][0]
#                     sx, sy = i-1-(rx-1), j-1-(ry-1)
#                     # print "sx %d, i %d, m %d" % (sx, i, j)
#                     # print "sy %d, j %d, n %d" % (sy, j, n)
#                     can_right = all(x == 1 for bk in matrix[sx:i][j:j+1] for x in bk )
#                     can_down = all(x == 1 for bk in matrix[i:i+1][sy:j] for x in bk )

#                     if can_right:
#                         ry += 1
#                     else:
#                         ry = 1
#                     if can_down:
#                         rx += 1
#                     else:
#                         rx = 1
#                     dp[i][j] = (rx, ry)
#                     print "(%d, %d) achieve (rx, ry) = (%d, %d), right %s, down %s, dp_left %s, dp_up %s" % (i, j, rx, ry, str(can_right), str(can_down), str(dp[i][j-1]), str(dp[i-1][j]))
#                     res = max(res, rx * ry)
#         print dp
#         return res

# class Solution(object):
#     def maximalRectangle(self, matrix):
#         """
#         :type matrix: List[List[str]]
#         :rtype: int
#         """
#         if matrix == [[]]:
#             return 0
#         m, n = len(matrix), len(matrix[0])
#         res = 0

#         dp = [[(0,0) for i in xrange(n)] for j in xrange(m)]
#         dp[0][0] = (1, 1) if matrix[0][0] == 1 else (0, 0)
#         res = dp[0][0][0]
#         for i in xrange(1, m):
#             if matrix[i][0] == 1:
#                 dp[i][0] = (dp[i-1][0][0]+1, 1)
#                 res = max(dp[i][0][0], res)
#             else:
#                 dp[i][0] = (0,0)

#         for i in xrange(1, n):
#             if matrix[0][i] == 1:
#                 dp[0][i] = (1, dp[0][j-1][1]+1)
#                 res = max(dp[0][i][1], res)
#             else:
#                 dp[0][i] = (0,0)


#         for i in xrange(1, m):
#             for j in xrange(1, n):
#                 if matrix[i][j] == 1:
#                     can_right = all(x == 1 for bk in matrix[0:i][j:j+1] for x in bk )
#                     can_down = all(x == 1 for bk in matrix[i:i+1][0:j] for x in bk )

#                     rx, ry = dp[i-1][j][1], dp[i][j-1][0]
#                     if can_right:
#                         ry += 1
#                     else:
#                         ry = 1
#                     if can_down:
#                         rx += 1
#                     else:
#                         rx = 1
#                     dp[i][j] = (rx, ry)
#                     print "(%d, %d) achieve (rx, ry) = (%d, %d), right %s, down %s, dp_left %s, dp_up %s" % (i, j, rx, ry, str(can_right), str(can_down), str(dp[i][j-1]), str(dp[i-1][j]))
#                     res = max(res, rx * ry)
#         return res


class Solution(object):
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if matrix == [[]] or matrix == [] or matrix == [""]:
            return 0
        m = len(matrix)
        if m < 1:
            return 0
        n = len(matrix[0])
        res = 0

        # matrix = [[0 for i in xrange(n)] for j in xrange(m)]

        for i in xrange(m):
            for j in xrange(n):
                if matrix[i][j] == '0':
                    matrix[i][j] = 0
                elif matrix[i][j] == '1':
                    matrix[i][j] = 1
                else:
                    matrix[i][j] = matrix[i][j]


        dp = [[(0,0) for i in xrange(n)] for j in xrange(m)]
        dp[0][0] = (1, 1) if matrix[0][0] == 1 else (0, 0)
        res = dp[0][0][0]
        for i in xrange(1, m):
            if matrix[i][0] == 1:
                dp[i][0] = (dp[i-1][0][0]+1, 1)
                res = max(dp[i][0][0], res)
            else:
                dp[i][0] = (0,0)

        for i in xrange(1, n):
            if matrix[0][i] == 1:
                dp[0][i] = (1, dp[0][i-1][1]+1)
                res = max(dp[0][i][1], res)
            else:
                dp[0][i] = (0,0)


        for i in xrange(1, m):
            for j in xrange(1, n):
                if matrix[i][j] == 1:
                    # print "===================="
                    # print "(i,j) = (%d,%d)" % (i,j)
                    dp[i][j] = (1, 1)
                    xx, yy = i, j
                    while xx >= 0 and matrix[xx][j] != 0:
                        xx -= 1
                    while yy >= 0 and matrix[i][yy] != 0:
                        yy -= 1
                    if matrix[i-1][j-1] != 0:
                        rx, ry = dp[i-1][j-1][0], dp[i-1][j-1][1]

                        # print i,j, rx, ry, colx, coly, rowx, rowy
                        tx, ty = max((i-1)-(rx-1), xx+1), max((j-1)-(ry-1), yy+1)
                        # print tx, ty
                        dp[i][j] = (i-tx+1, j-ty+1)

                    if matrix[i-1][j] != 0:
                        temp = (i-xx, 1)
                        if temp[0] * temp[1] > dp[i][j][0] * dp[i][j][1]:
                            dp[i][j] = temp

                    if matrix[i][j-1] != 0:
                        temp = (1, j-yy)
                        if temp[0] * temp[1] > dp[i][j][0] * dp[i][j][1]:
                            dp[i][j] = temp

                    # print "(%d,%d) final is (%d, %d)" % (i,j, dp[i][j][0], dp[i][j][1])
                    res = max(dp[i][j][0] * dp[i][j][1], res)
        # print dp[4][5]
        return res


sln = Solution()
print sln.maximalRectangle([[1]])
m = [[1,0,1,0,0],[1,0,1,1,1],[1,1,1,1,1],[1,0,0,1,0]]
print sln.maximalRectangle(m)
print sln.maximalRectangle([[1],[0],[1]])
print sln.maximalRectangle([[]])
print sln.maximalRectangle([[0,0,1,0],[1,1,1,1],[1,1,1,1],[1,1,1,0],[1,1,0,0],[1,1,1,1],[1,1,1,0]])
print sln.maximalRectangle([[0,0,0,1,0,1,0],[0,1,0,0,0,0,0],[0,1,0,1,0,0,1],[0,0,1,1,0,0,1],[1,1,1,1,1,1,0],[1,0,0,1,0,1,1],[0,1,0,0,1,0,1],[1,1,0,1,1,1,0],[1,0,1,0,1,0,1],[1,1,1,0,0,0,0]])
print sln.maximalRectangle([[0,1,0,0,0],[1,0,0,1,1],[1,0,0,1,1]])
print sln.maximalRectangle([[0,0,0],[0,1,1],[0,1,1]])
# print sln.maximalRectangle

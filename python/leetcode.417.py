def surround(mat, n, m, inp = -1):
    newmat = []
    newmat.append([inp] * (m + 2))
    for l in mat:
        newmat.append([inp] + l + [inp])
    newmat.append([inp] * (m + 2))
    return newmat

class Solution(object):
    def pacificAtlantic(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """
        n = len(matrix)
        if n == 0:
            return []
        m = len(matrix[0])
        if m == 0:
            return []

        matrix = surround(matrix, n, m)
        for l in matrix:
            print l

        n += 2
        m += 2

        visp = [[0 for i in xrange(m)] for j in xrange(n)]
        visa = [[0 for i in xrange(m)] for j in xrange(n)]
        inf = 555555555555555555
        matrix[n - 1][0] = -inf
        matrix[0][m - 1] = -inf

        def valid(x, y):
            return 0 <= x < n and 0 <= y < m

        def dfs(x, y, vis):
            DX = [-1, 0, 0, 1]
            DY = [0, -1, 1, 0]

            vis[x][y] = 1

            for dx, dy in zip(DX, DY):
                nx, ny = x + dx, y + dy
                if valid(nx, ny) and not vis[nx][ny] and matrix[x][y] <= matrix[nx][ny]:
                    dfs(nx, ny, vis)

        dfs(0, 0, visa)
        dfs(n - 1, m - 1, visp)

        ans = []
        for i in xrange(1, n - 1):
            for j in xrange(1, m - 1):
                if visa[i][j] and visp[i][j]:
                    ans.append([i - 1, j - 1])
        return ans

# sln = Solution()
# print sln.pacificAtlantic([[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]])
# print sln.pacificAtlantic([[3,3,3,3,3,3],[3,0,3,3,0,3],[3,3,3,3,3,3]])
# print sln.pacificAtlantic([[4,4,1,7,4,18,5,5,1,6,6,10,17,19,13,3,19],[19,8,3,14,18,11,2,2,5,2,19,15,18,12,16,7,19],[2,4,15,2,6,4,18,13,12,11,0,11,6,19,17,11,9],[10,2,0,7,13,3,7,0,5,4,10,2,3,18,10,8,10],[13,16,8,5,15,12,8,14,16,18,18,19,10,14,9,4,12],[0,16,14,14,13,15,2,16,1,13,17,9,6,11,17,4,13],[7,9,1,5,18,15,2,1,13,3,0,7,8,8,9,12,0],[7,13,14,5,3,16,5,4,5,3,9,11,11,3,1,17,12],[8,18,17,9,1,0,18,7,16,15,14,14,16,8,11,13,10],[14,19,19,19,19,12,2,17,17,8,10,19,16,7,10,12,17],[7,0,5,2,10,7,1,0,15,3,5,2,14,16,17,9,10],[11,10,15,4,17,11,17,14,18,11,17,15,19,1,9,7,17],[10,8,12,15,13,3,15,14,5,4,4,4,0,11,16,14,15],[16,5,3,5,13,1,6,3,8,9,3,18,11,9,7,5,14],[5,7,14,13,6,12,10,6,6,12,5,0,2,0,0,15,19],[14,11,17,13,6,11,15,0,6,4,5,1,15,1,19,0,14],[17,5,0,0,10,13,4,10,17,5,5,6,16,19,1,11,0],[14,18,11,8,0,1,0,11,1,7,15,11,4,5,18,14,19],[17,10,17,17,1,17,16,16,19,15,0,14,15,2,1,18,4],[12,13,0,15,16,3,1,7,10,9,0,2,13,4,7,1,15],[9,6,17,12,6,19,2,15,3,14,10,15,10,11,15,13,10],[2,19,4,12,19,5,18,9,4,5,1,9,17,8,14,12,15],[5,1,6,17,0,15,13,3,14,13,15,4,15,11,7,15,4],[14,5,6,9,11,6,4,10,16,11,6,6,0,17,13,1,10],[5,18,3,15,10,6,10,6,12,5,13,2,5,7,3,3,19],[11,7,17,17,8,2,11,3,0,7,16,13,7,0,12,11,14],[18,1,19,7,14,9,8,2,3,16,7,9,16,4,18,8,3],[5,8,19,0,10,12,9,12,10,2,11,3,15,8,18,12,3],[15,2,4,9,4,4,18,12,6,10,10,3,6,6,17,3,14],[18,17,13,0,12,15,3,2,15,17,8,16,8,7,17,18,2],[5,12,12,17,18,11,8,6,13,13,14,18,17,9,16,8,5],[16,1,9,13,6,12,15,3,12,6,2,14,10,16,11,3,8],[0,7,16,3,7,0,10,10,7,3,4,18,7,18,7,15,12],[8,7,12,17,8,8,18,11,7,12,18,2,19,6,6,3,13],[6,19,14,9,16,9,13,13,4,11,0,0,3,1,9,10,7],[0,8,14,13,1,7,7,7,2,15,12,6,10,10,3,14,8],[10,17,1,8,8,16,14,18,18,1,10,12,3,13,10,6,5],[8,17,17,6,2,14,5,3,7,5,4,5,13,14,17,14,15],[2,6,12,4,14,11,14,3,12,10,12,15,9,7,0,4,5],[13,11,5,13,12,3,19,10,16,8,3,11,7,10,0,5,18],[0,18,1,8,19,11,0,1,2,19,14,11,10,15,12,3,15]])